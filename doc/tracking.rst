Tracking
########

Tracking is the concept of associating a detection from a frame or image to
a detection in another frame or image. A "Track" is a series of detections
each representing multiple looks at the same underlying real-world object.


Running a tracker
=================

The tracks are generated by joining detections into tracklets, or an associated
group of detections. Iterations are performed to then join tracklets into larger
tracklets until confidence is reached that all tracklets are now well-formed
tracks. The amount of loops is discussed under "Data Considerations". For the
purposes of implementation symetry, the first iteration casts detections to
each be a tracklet containing 1 detection.

Each stage of the loop executes a graph-based algorithm that solves which
tracklets to join based on the weights associated with each edge in the graph.
More than 2 edges can be joined in 1 iteration of the graph reduction.
There are an infinite number of ways to calculate weights of each edge. The
ones supported in openEM are the following:

Recursive graph solving overview
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

<TBD> Discuss graph solving algorithm. Discuss how iteration a bit. Define
weights.

Simple IOU
^^^^^^^^^^
<TBD>

Directional
^^^^^^^^^^^

<TBD>

Siamese CNN
^^^^^^^^^^^

This method compares two tracklets that each have no more than 1 detection. The
appearance features of each detection are extracted and compared. The simularity
of each detection is used as an edge in the graph.

<Example Solution>

RNN
^^^

<TBD>

Multiple stage approach
^^^^^^^^^^^^^^^^^^^^^^^

Each one of these stages can be used in conjunction with another.


Training considerations
=======================

<Discuss Tradeoffs of each approach in terms of training complexity>
